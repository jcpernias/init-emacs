# -*- ispell-dictionary: english; -*-

#+TITLE: Emacs configuration

#+STARTUP: indent hidestars content

#+PROPERTY: header-args:emacs-lisp :tangle init.el

* Initialize package system

Workaround for a bug in Emacs: https://debbugs.gnu.org/34341
#+begin_src emacs-lisp
  (setq gnutls-algorithm-priority "NORMAL:-VERS-TLS1.3")
#+end_src

Set up the Emacs package system (see
http://emacs.stackexchange.com/a/5888).
#+begin_src emacs-lisp
  (require 'package)
  (setq package-enable-at-startup nil)
#+end_src

Package repositories.
#+begin_src emacs-lisp
  (setq package-archives
        '(("gnu"         . "https://elpa.gnu.org/packages/")
          ("melpa"       . "https://melpa.org/packages/")))
#+end_src

Initialize Emacs package system.
#+begin_src emacs-lisp
  (unless package--initialized
    (package-initialize))
  (unless package-archive-contents
    (package-refresh-contents))
#+end_src

Install use-package (https://github.com/jwiegley/use-package). Assume
':ensure t' for every package.
#+begin_src emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (require 'use-package)
  (setq use-package-always-ensure t)
#+end_src


* Basic configuration


** User interface

Disable startup screen:
#+begin_src emacs-lisp
  (setq inhibit-startup-screen t)
#+end_src

Do not show initial message in scratch buffer:
#+begin_src emacs-lisp
  (setq initial-scratch-message nil)
#+end_src

Disable scrollbars, tooltips and the toolbar:
#+begin_src emacs-lisp
  (if (fboundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
  (if (fboundp 'horizontal-scroll-mode)
      (horizontal-scroll-mode -1))
  (if (fboundp 'tool-bar-mode)
      (tool-bar-mode -1))
  (if (fboundp 'tooltip-mode)
      (tooltip-mode -1))
  ;; uncomment to disable the menu bar
  ;; (if (fboundp 'menu-bar-mode)
  ;;     (menu-bar-mode -1))
#+end_src

Set more room for the fringes:
#+begin_src emacs-lisp
  (set-fringe-mode 10)
#+end_src

Turn on the visual bell. In macOS flash the mode line instead of the
default warning sign:
#+begin_src emacs-lisp
  (defun jcp/flash-mode-line ()
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))

  (if (eq system-type 'darwin)
      (setq visible-bell nil
            ring-bell-function #'jcp/flash-mode-line)
    (setq visible-bell t))
#+end_src

** Frame parameters

Some fuctions for quickly changing the width of the current frame:
#+begin_src emacs-lisp
  (defun jcp/set-selected-frame-width (width)
    (set-frame-width (selected-frame) width))

  (defun jcp/widen-frame ()
    "Widens the selected frame"
    (interactive)
    (jcp/set-selected-frame-width 172))

  (defun jcp/shrink-frame ()
    "Shrinks the selected frame"
    (interactive)
    (jcp/set-selected-frame-width 86))

  (global-set-key (kbd "C-c w") #'jcp/widen-frame)
  (global-set-key (kbd "C-c s") #'jcp/shrink-frame)
#+end_src

* Extensions

** Delight

#+begin_src emacs-lisp
  (use-package delight
    :config
    (delight '((abbrev-mode " Abv" abbrev)
               (eldoc-mode nil "eldoc")
               (overwrite-mode " Ov" t)
               (flyspell-mode " Spell" flyspell)
               (auto-revert-mode nil autorevert)
               (lisp-interaction-mode "li" :major)
               (emacs-lisp-mode "el" :major))))
#+end_src

** Ivy

See [[https://www.reddit.com/r/emacs/comments/910pga/tip_how_to_use_ivy_and_its_utilities_in_your/?utm_source=share&utm_medium=web2x][here]].
#+begin_src emacs-lisp
  (use-package counsel
    :delight
    :after ivy
    :config (counsel-mode))

  (use-package ivy
    :defer 0.1
    :delight
    :bind (("C-c C-r" . ivy-resume)
           ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (ivy-count-format "(%d/%d) ")
    (ivy-use-virtual-buffers t)
    :init
    (setq ivy-use-selectable-prompt t)
    :config
    (ivy-mode))

  (use-package ivy-rich
    :after ivy
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
  ;; :init
  ;; (setq ivy-virtual-abbreviate 'full
  ;;       ivy-rich-path-style 'abbrev)
  ;; :config
  ;; (ivy-rich-mode 1)
  ;; (setcdr (assq t ivy-format-functions-alist) #'ivy-format-function-line))

  (use-package swiper
    :after ivy
    :bind (("C-s" . swiper)
           ("C-r" . swiper)))

  ;; ivy, swiper, counsel
  (global-set-key (kbd "M-x") 'counsel-M-x)
  (global-set-key (kbd "C-x C-f") 'counsel-find-file)
  (global-set-key (kbd "C-x l") 'counsel-locate)
  (global-set-key (kbd "C-c p") 'counsel-compile)
  (global-set-key (kbd "C-h f") 'counsel-describe-function)
  (global-set-key (kbd "C-h v") 'counsel-describe-variable)
  (global-set-key (kbd "C-h l") 'counsel-find-library)
  (global-set-key (kbd "C-h y") 'counsel-info-lookup-symbol)
  (global-set-key (kbd "C-h u") 'counsel-unicode-char)
  (global-set-key (kbd "C-s") 'counsel-grep-or-swiper)
  (global-set-key (kbd "C-r") 'counsel-grep-or-swiper-backward)
  (global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)

  (global-set-key (kbd "C-c C-r") 'ivy-resume)
  (global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
  (global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
  (global-set-key (kbd "C-x B") 'ivy-switch-buffer-other-window)
#+end_src



** Magit

#+begin_src emacs-lisp
(use-package magit
  :config
  (add-to-list 'magit-no-confirm 'stage-all-changes)
  (setq magit-push-always-verify nil)
  ;; Disable diff before commit
  ;; (global-magit-file-mode)
  (setq vc-handled-backends (delq 'Git vc-handled-backends)))
#+end_src
